
online12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000d92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800092  00800092  00000e58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002635  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e34  00000000  00000000  00003761  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000135c  00000000  00000000  00004595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000628  00000000  00000000  000058f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a5  00000000  00000000  00005f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000208e  00000000  00000000  000068c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000894f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3b       	cpi	r26, 0xB1	; 177
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 00 02 	call	0x400	; 0x400 <main>
  8a:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteInst>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteInst+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteInst+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
  ec:	c3 fb       	bst	r28, 3
  ee:	66 27       	eor	r22, r22
  f0:	60 f9       	bld	r22, 0
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
  f8:	c2 fb       	bst	r28, 2
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	85 e0       	ldi	r24, 0x05	; 5
 100:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 104:	c1 fb       	bst	r28, 1
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	84 e0       	ldi	r24, 0x04	; 4
 10c:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 110:	6c 2f       	mov	r22, r28
 112:	61 70       	andi	r22, 0x01	; 1
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 122:	8f ec       	ldi	r24, 0xCF	; 207
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <WriteInst+0x94>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <WriteInst+0x9a>
 12c:	00 00       	nop
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 136:	8f ec       	ldi	r24, 0xCF	; 207
 138:	97 e0       	ldi	r25, 0x07	; 7
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <WriteInst+0xa8>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <WriteInst+0xae>
 140:	00 00       	nop
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <WriteData>:
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 152:	6c 2f       	mov	r22, r28
 154:	66 1f       	adc	r22, r22
 156:	66 27       	eor	r22, r22
 158:	66 1f       	adc	r22, r22
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 160:	c6 fb       	bst	r28, 6
 162:	66 27       	eor	r22, r22
 164:	60 f9       	bld	r22, 0
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 16c:	c5 fb       	bst	r28, 5
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 178:	c4 fb       	bst	r28, 4
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 18c:	8f ec       	ldi	r24, 0xCF	; 207
 18e:	97 e0       	ldi	r25, 0x07	; 7
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <WriteData+0x4a>
 194:	00 c0       	rjmp	.+0      	; 0x196 <WriteData+0x50>
 196:	00 00       	nop
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 1a0:	c3 fb       	bst	r28, 3
 1a2:	66 27       	eor	r22, r22
 1a4:	60 f9       	bld	r22, 0
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 1ac:	c2 fb       	bst	r28, 2
 1ae:	66 27       	eor	r22, r22
 1b0:	60 f9       	bld	r22, 0
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 1b8:	c1 fb       	bst	r28, 1
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 1c4:	6c 2f       	mov	r22, r28
 1c6:	61 70       	andi	r22, 0x01	; 1
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 1d6:	8f ec       	ldi	r24, 0xCF	; 207
 1d8:	97 e0       	ldi	r25, 0x07	; 7
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <WriteData+0x94>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <WriteData+0x9a>
 1e0:	00 00       	nop
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 9e 03 	call	0x73c	; 0x73c <DIO_WritePin>
 1ea:	8f ec       	ldi	r24, 0xCF	; 207
 1ec:	97 e0       	ldi	r25, 0x07	; 7
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <WriteData+0xa8>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <WriteData+0xae>
 1f4:	00 00       	nop
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <LCD_Init>:
 1fa:	2f e7       	ldi	r18, 0x7F	; 127
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <LCD_Init+0x6>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_Init+0x10>
 20a:	00 00       	nop
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 218:	8c e0       	ldi	r24, 0x0C	; 12
 21a:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 224:	8f ec       	ldi	r24, 0xCF	; 207
 226:	97 e0       	ldi	r25, 0x07	; 7
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x2e>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0x34>
 22e:	00 00       	nop
 230:	86 e0       	ldi	r24, 0x06	; 6
 232:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 236:	08 95       	ret

00000238 <LCD_WriteChar>:
 238:	0e 94 a3 00 	call	0x146	; 0x146 <WriteData>
 23c:	08 95       	ret

0000023e <LCD_WriteString>:
}
void LCD_Clear(void){
	WriteInst(0x01);
	_delay_ms(1);
}
void LCD_WriteString(char *str ){
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	8c 01       	movw	r16, r24
	for (int i = 0 ; str[i] ; i ++ ){
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	03 c0       	rjmp	.+6      	; 0x254 <LCD_WriteString+0x16>
		LCD_WriteChar((u8)str[i]) ;
 24e:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_WriteChar>
void LCD_Clear(void){
	WriteInst(0x01);
	_delay_ms(1);
}
void LCD_WriteString(char *str ){
	for (int i = 0 ; str[i] ; i ++ ){
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	f8 01       	movw	r30, r16
 256:	ec 0f       	add	r30, r28
 258:	fd 1f       	adc	r31, r29
 25a:	80 81       	ld	r24, Z
 25c:	81 11       	cpse	r24, r1
 25e:	f7 cf       	rjmp	.-18     	; 0x24e <LCD_WriteString+0x10>
		LCD_WriteChar((u8)str[i]) ;
	}
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <LCD_WriteNumber>:

void LCD_WriteNumber(s64 num){
 26a:	2f 92       	push	r2
 26c:	3f 92       	push	r3
 26e:	4f 92       	push	r4
 270:	5f 92       	push	r5
 272:	6f 92       	push	r6
 274:	7f 92       	push	r7
 276:	8f 92       	push	r8
 278:	9f 92       	push	r9
 27a:	af 92       	push	r10
 27c:	bf 92       	push	r11
 27e:	cf 92       	push	r12
 280:	df 92       	push	r13
 282:	ef 92       	push	r14
 284:	ff 92       	push	r15
 286:	0f 93       	push	r16
 288:	1f 93       	push	r17
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	66 97       	sbiw	r28, 0x16	; 22
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	2d 8b       	std	Y+21, r18	; 0x15
 2a0:	3e 8b       	std	Y+22, r19	; 0x16
 2a2:	94 2e       	mov	r9, r20
 2a4:	85 2e       	mov	r8, r21
 2a6:	76 2e       	mov	r7, r22
 2a8:	67 2e       	mov	r6, r23
 2aa:	38 2e       	mov	r3, r24
 2ac:	29 2e       	mov	r2, r25
	if (num == 0 ) LCD_WriteChar('0') ; 
 2ae:	a0 e0       	ldi	r26, 0x00	; 0
 2b0:	0e 94 b2 06 	call	0xd64	; 0xd64 <__cmpdi2_s8>
 2b4:	19 f4       	brne	.+6      	; 0x2bc <LCD_WriteNumber+0x52>
 2b6:	80 e3       	ldi	r24, 0x30	; 48
 2b8:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_WriteChar>
	if (num <  0 ){
 2bc:	2d 89       	ldd	r18, Y+21	; 0x15
 2be:	3e 89       	ldd	r19, Y+22	; 0x16
 2c0:	49 2d       	mov	r20, r9
 2c2:	58 2d       	mov	r21, r8
 2c4:	67 2d       	mov	r22, r7
 2c6:	76 2d       	mov	r23, r6
 2c8:	83 2d       	mov	r24, r3
 2ca:	92 2d       	mov	r25, r2
 2cc:	a0 e0       	ldi	r26, 0x00	; 0
 2ce:	0e 94 b2 06 	call	0xd64	; 0xd64 <__cmpdi2_s8>
 2d2:	ac f4       	brge	.+42     	; 0x2fe <LCD_WriteNumber+0x94>
		LCD_WriteChar('-') ;
 2d4:	8d e2       	ldi	r24, 0x2D	; 45
 2d6:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_WriteChar>
		num = num*-1 ; 
 2da:	2d 89       	ldd	r18, Y+21	; 0x15
 2dc:	3e 89       	ldd	r19, Y+22	; 0x16
 2de:	49 2d       	mov	r20, r9
 2e0:	58 2d       	mov	r21, r8
 2e2:	67 2d       	mov	r22, r7
 2e4:	76 2d       	mov	r23, r6
 2e6:	83 2d       	mov	r24, r3
 2e8:	92 2d       	mov	r25, r2
 2ea:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__negdi2>
 2ee:	2d 8b       	std	Y+21, r18	; 0x15
 2f0:	3e 8b       	std	Y+22, r19	; 0x16
 2f2:	94 2e       	mov	r9, r20
 2f4:	85 2e       	mov	r8, r21
 2f6:	76 2e       	mov	r7, r22
 2f8:	67 2e       	mov	r6, r23
 2fa:	38 2e       	mov	r3, r24
 2fc:	29 2e       	mov	r2, r25
		} 
	u8 arr[20] = {0} ;
 2fe:	fe 01       	movw	r30, r28
 300:	31 96       	adiw	r30, 0x01	; 1
 302:	84 e1       	ldi	r24, 0x14	; 20
 304:	df 01       	movw	r26, r30
 306:	1d 92       	st	X+, r1
 308:	8a 95       	dec	r24
 30a:	e9 f7       	brne	.-6      	; 0x306 <LCD_WriteNumber+0x9c>
	int i = 0 ;
 30c:	41 2c       	mov	r4, r1
 30e:	51 2c       	mov	r5, r1
	for ( ; num ; i++ ){
 310:	31 c0       	rjmp	.+98     	; 0x374 <LCD_WriteNumber+0x10a>
		arr[i] = num%10 ;
 312:	0f 2e       	mov	r0, r31
 314:	fa e0       	ldi	r31, 0x0A	; 10
 316:	af 2e       	mov	r10, r31
 318:	f0 2d       	mov	r31, r0
 31a:	b1 2c       	mov	r11, r1
 31c:	c1 2c       	mov	r12, r1
 31e:	d1 2c       	mov	r13, r1
 320:	e1 2c       	mov	r14, r1
 322:	f1 2c       	mov	r15, r1
 324:	00 e0       	ldi	r16, 0x00	; 0
 326:	10 e0       	ldi	r17, 0x00	; 0
 328:	2d 89       	ldd	r18, Y+21	; 0x15
 32a:	3e 89       	ldd	r19, Y+22	; 0x16
 32c:	49 2d       	mov	r20, r9
 32e:	58 2d       	mov	r21, r8
 330:	67 2d       	mov	r22, r7
 332:	76 2d       	mov	r23, r6
 334:	83 2d       	mov	r24, r3
 336:	92 2d       	mov	r25, r2
 338:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__moddi3>
 33c:	e1 e0       	ldi	r30, 0x01	; 1
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	ec 0f       	add	r30, r28
 342:	fd 1f       	adc	r31, r29
 344:	e4 0d       	add	r30, r4
 346:	f5 1d       	adc	r31, r5
 348:	20 83       	st	Z, r18
		num	 = num /10 ;
 34a:	2d 89       	ldd	r18, Y+21	; 0x15
 34c:	3e 89       	ldd	r19, Y+22	; 0x16
 34e:	49 2d       	mov	r20, r9
 350:	58 2d       	mov	r21, r8
 352:	67 2d       	mov	r22, r7
 354:	76 2d       	mov	r23, r6
 356:	83 2d       	mov	r24, r3
 358:	92 2d       	mov	r25, r2
 35a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__divdi3>
 35e:	2d 8b       	std	Y+21, r18	; 0x15
 360:	3e 8b       	std	Y+22, r19	; 0x16
 362:	94 2e       	mov	r9, r20
 364:	85 2e       	mov	r8, r21
 366:	76 2e       	mov	r7, r22
 368:	67 2e       	mov	r6, r23
 36a:	38 2e       	mov	r3, r24
 36c:	29 2e       	mov	r2, r25
		LCD_WriteChar('-') ;
		num = num*-1 ; 
		} 
	u8 arr[20] = {0} ;
	int i = 0 ;
	for ( ; num ; i++ ){
 36e:	bf ef       	ldi	r27, 0xFF	; 255
 370:	4b 1a       	sub	r4, r27
 372:	5b 0a       	sbc	r5, r27
 374:	2d 89       	ldd	r18, Y+21	; 0x15
 376:	3e 89       	ldd	r19, Y+22	; 0x16
 378:	49 2d       	mov	r20, r9
 37a:	58 2d       	mov	r21, r8
 37c:	67 2d       	mov	r22, r7
 37e:	76 2d       	mov	r23, r6
 380:	83 2d       	mov	r24, r3
 382:	92 2d       	mov	r25, r2
 384:	a0 e0       	ldi	r26, 0x00	; 0
 386:	0e 94 b2 06 	call	0xd64	; 0xd64 <__cmpdi2_s8>
 38a:	19 f6       	brne	.-122    	; 0x312 <LCD_WriteNumber+0xa8>
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <LCD_WriteNumber+0x13a>
		arr[i] = num%10 ;
		num	 = num /10 ;
	}

	while(i--){
		LCD_WriteChar(arr[i]+'0');
 38e:	e1 e0       	ldi	r30, 0x01	; 1
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	e8 0d       	add	r30, r8
 398:	f9 1d       	adc	r31, r9
 39a:	80 81       	ld	r24, Z
 39c:	80 5d       	subi	r24, 0xD0	; 208
 39e:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_WriteChar>
	for ( ; num ; i++ ){
		arr[i] = num%10 ;
		num	 = num /10 ;
	}

	while(i--){
 3a2:	24 01       	movw	r4, r8
 3a4:	42 01       	movw	r8, r4
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	88 1a       	sub	r8, r24
 3aa:	91 08       	sbc	r9, r1
 3ac:	45 28       	or	r4, r5
 3ae:	79 f7       	brne	.-34     	; 0x38e <LCD_WriteNumber+0x124>
		LCD_WriteChar(arr[i]+'0');

	}
}
 3b0:	66 96       	adiw	r28, 0x16	; 22
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	df 90       	pop	r13
 3ca:	cf 90       	pop	r12
 3cc:	bf 90       	pop	r11
 3ce:	af 90       	pop	r10
 3d0:	9f 90       	pop	r9
 3d2:	8f 90       	pop	r8
 3d4:	7f 90       	pop	r7
 3d6:	6f 90       	pop	r6
 3d8:	5f 90       	pop	r5
 3da:	4f 90       	pop	r4
 3dc:	3f 90       	pop	r3
 3de:	2f 90       	pop	r2
 3e0:	08 95       	ret

000003e2 <LCD_SetCursor>:
void LCD_SetCursor(u8 line,u8 cell){
	
	if (line == 0  ){
 3e2:	81 11       	cpse	r24, r1
 3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <LCD_SetCursor+0xe>
		WriteInst(0x80|cell);
 3e6:	86 2f       	mov	r24, r22
 3e8:	80 68       	ori	r24, 0x80	; 128
 3ea:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 3ee:	08 95       	ret
	}
	else if (line ==1  ){
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	29 f4       	brne	.+10     	; 0x3fe <LCD_SetCursor+0x1c>
		WriteInst(0x80|(cell+0x40));
 3f4:	80 e4       	ldi	r24, 0x40	; 64
 3f6:	86 0f       	add	r24, r22
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 3fe:	08 95       	ret

00000400 <main>:
#include "ADC_filter.h"
#include "ADC_SERVICE.h"
#include "tempSensor.h"
int main(void)
{
	DIO_Init();
 400:	0e 94 23 04 	call	0x846	; 0x846 <DIO_Init>
	UART_Init();
 404:	0e 94 33 04 	call	0x866	; 0x866 <UART_Init>
	LCD_Init();
 408:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_Init>
	LCD_WriteString("device filter")	;
 40c:	80 e8       	ldi	r24, 0x80	; 128
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_WriteString>
	
	ADC_Init(AVCC,R_ADJAST,ADC_SCALER_64);
 414:	46 e0       	ldi	r20, 0x06	; 6
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 2a 02 	call	0x454	; 0x454 <ADC_Init>
	ADC_filter_init();
 41e:	0e 94 c1 04 	call	0x982	; 0x982 <ADC_filter_init>
	//	u16  adcReead = 0 ;  ;
	
	//Que_S_t state2 = FINE_QUE ;
	while (1)
	{
		ADC_Call_Filter();
 422:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <ADC_Call_Filter>
		x = ADC_Getter_Filter();
 426:	0e 94 17 05 	call	0xa2e	; 0xa2e <ADC_Getter_Filter>
 42a:	ec 01       	movw	r28, r24
		LCD_SetCursor(1,0);
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_SetCursor>
		LCD_WriteNumber(x);
 434:	ce 01       	movw	r24, r28
 436:	28 2f       	mov	r18, r24
 438:	39 2f       	mov	r19, r25
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_WriteNumber>
		LCD_WriteString("  ");
 44a:	8e e8       	ldi	r24, 0x8E	; 142
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_WriteString>
 452:	e7 cf       	rjmp	.-50     	; 0x422 <main+0x22>

00000454 <ADC_Init>:
	SET_BIT(ADCSRA,ADIE);
}
void ADC_Interrup_Disable(void){
	CLR_BIT(ADCSRA,ADIE);
}
void ADC_Interrup_Callback(void (*ptr)(void)){
 454:	97 b1       	in	r25, 0x07	; 7
 456:	9f 73       	andi	r25, 0x3F	; 63
 458:	97 b9       	out	0x07, r25	; 7
 45a:	82 95       	swap	r24
 45c:	88 0f       	add	r24, r24
 45e:	88 0f       	add	r24, r24
 460:	80 7c       	andi	r24, 0xC0	; 192
 462:	97 b1       	in	r25, 0x07	; 7
 464:	89 2b       	or	r24, r25
 466:	87 b9       	out	0x07, r24	; 7
 468:	86 b1       	in	r24, 0x06	; 6
 46a:	8e 7f       	andi	r24, 0xFE	; 254
 46c:	94 2f       	mov	r25, r20
 46e:	91 70       	andi	r25, 0x01	; 1
 470:	89 2b       	or	r24, r25
 472:	86 b9       	out	0x06, r24	; 6
 474:	86 b1       	in	r24, 0x06	; 6
 476:	41 fb       	bst	r20, 1
 478:	ee 27       	eor	r30, r30
 47a:	e0 f9       	bld	r30, 0
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	8d 7f       	andi	r24, 0xFD	; 253
 484:	e8 2b       	or	r30, r24
 486:	e6 b9       	out	0x06, r30	; 6
 488:	86 b1       	in	r24, 0x06	; 6
 48a:	42 fb       	bst	r20, 2
 48c:	22 27       	eor	r18, r18
 48e:	20 f9       	bld	r18, 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	22 0f       	add	r18, r18
 498:	33 1f       	adc	r19, r19
 49a:	8b 7f       	andi	r24, 0xFB	; 251
 49c:	28 2b       	or	r18, r24
 49e:	26 b9       	out	0x06, r18	; 6
 4a0:	87 b1       	in	r24, 0x07	; 7
 4a2:	90 e1       	ldi	r25, 0x10	; 16
 4a4:	69 9f       	mul	r22, r25
 4a6:	b0 01       	movw	r22, r0
 4a8:	11 24       	eor	r1, r1
 4aa:	8f 7e       	andi	r24, 0xEF	; 239
 4ac:	68 2b       	or	r22, r24
 4ae:	67 b9       	out	0x07, r22	; 7
 4b0:	86 b1       	in	r24, 0x06	; 6
 4b2:	80 62       	ori	r24, 0x20	; 32
 4b4:	86 b9       	out	0x06, r24	; 6
 4b6:	80 b7       	in	r24, 0x30	; 48
 4b8:	8f 77       	andi	r24, 0x7F	; 127
 4ba:	80 bf       	out	0x30, r24	; 48
 4bc:	80 b7       	in	r24, 0x30	; 48
 4be:	8f 7b       	andi	r24, 0xBF	; 191
 4c0:	80 bf       	out	0x30, r24	; 48
 4c2:	80 b7       	in	r24, 0x30	; 48
 4c4:	8f 7d       	andi	r24, 0xDF	; 223
 4c6:	80 bf       	out	0x30, r24	; 48
 4c8:	86 b1       	in	r24, 0x06	; 6
 4ca:	80 68       	ori	r24, 0x80	; 128
 4cc:	86 b9       	out	0x06, r24	; 6
 4ce:	86 b1       	in	r24, 0x06	; 6
 4d0:	80 64       	ori	r24, 0x40	; 64
 4d2:	86 b9       	out	0x06, r24	; 6
 4d4:	08 95       	ret

000004d6 <ADC_Read>:
 4d6:	97 b1       	in	r25, 0x07	; 7
 4d8:	90 7e       	andi	r25, 0xE0	; 224
 4da:	97 b9       	out	0x07, r25	; 7
 4dc:	8f 71       	andi	r24, 0x1F	; 31
 4de:	97 b1       	in	r25, 0x07	; 7
 4e0:	89 2b       	or	r24, r25
 4e2:	87 b9       	out	0x07, r24	; 7
 4e4:	86 b1       	in	r24, 0x06	; 6
 4e6:	80 64       	ori	r24, 0x40	; 64
 4e8:	86 b9       	out	0x06, r24	; 6
 4ea:	36 99       	sbic	0x06, 6	; 6
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <ADC_Read+0x14>
 4ee:	84 b1       	in	r24, 0x04	; 4
 4f0:	95 b1       	in	r25, 0x05	; 5
 4f2:	93 70       	andi	r25, 0x03	; 3
 4f4:	08 95       	ret

000004f6 <__vector_16>:
	
}
// convention completed
void __vector_16 (void) __attribute__ ((signal));
void __vector_16 (void)
{
 4f6:	1f 92       	push	r1
 4f8:	0f 92       	push	r0
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	0f 92       	push	r0
 4fe:	11 24       	eor	r1, r1
 500:	2f 93       	push	r18
 502:	3f 93       	push	r19
 504:	4f 93       	push	r20
 506:	5f 93       	push	r21
 508:	6f 93       	push	r22
 50a:	7f 93       	push	r23
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	af 93       	push	r26
 512:	bf 93       	push	r27
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
	inQueue_ADC(ADC_READ_RIGH) ;
 518:	84 b1       	in	r24, 0x04	; 4
 51a:	95 b1       	in	r25, 0x05	; 5
 51c:	0e 94 59 05 	call	0xab2	; 0xab2 <inQueue_ADC>
	
	//SET_BIT (ADCSRA,ADSC);

	//LCD_WriteNumber(ADC_data);
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <DIO_InitPin>:
		case PD:
		data = PIND;
		break;
	}
	return data ;
}
 542:	98 2f       	mov	r25, r24
 544:	96 95       	lsr	r25
 546:	96 95       	lsr	r25
 548:	96 95       	lsr	r25
 54a:	87 70       	andi	r24, 0x07	; 7
 54c:	61 30       	cpi	r22, 0x01	; 1
 54e:	09 f4       	brne	.+2      	; 0x552 <DIO_InitPin+0x10>
 550:	55 c0       	rjmp	.+170    	; 0x5fc <DIO_InitPin+0xba>
 552:	20 f0       	brcs	.+8      	; 0x55c <DIO_InitPin+0x1a>
 554:	62 30       	cpi	r22, 0x02	; 2
 556:	09 f4       	brne	.+2      	; 0x55a <DIO_InitPin+0x18>
 558:	a1 c0       	rjmp	.+322    	; 0x69c <DIO_InitPin+0x15a>
 55a:	08 95       	ret
 55c:	91 30       	cpi	r25, 0x01	; 1
 55e:	c1 f0       	breq	.+48     	; 0x590 <DIO_InitPin+0x4e>
 560:	28 f0       	brcs	.+10     	; 0x56c <DIO_InitPin+0x2a>
 562:	92 30       	cpi	r25, 0x02	; 2
 564:	39 f1       	breq	.+78     	; 0x5b4 <DIO_InitPin+0x72>
 566:	93 30       	cpi	r25, 0x03	; 3
 568:	b9 f1       	breq	.+110    	; 0x5d8 <DIO_InitPin+0x96>
 56a:	08 95       	ret
 56c:	4a b3       	in	r20, 0x1a	; 26
 56e:	21 e0       	ldi	r18, 0x01	; 1
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	b9 01       	movw	r22, r18
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_InitPin+0x38>
 576:	66 0f       	add	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	8a 95       	dec	r24
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_InitPin+0x34>
 57e:	cb 01       	movw	r24, r22
 580:	94 2f       	mov	r25, r20
 582:	98 2b       	or	r25, r24
 584:	9a bb       	out	0x1a, r25	; 26
 586:	9b b3       	in	r25, 0x1b	; 27
 588:	80 95       	com	r24
 58a:	89 23       	and	r24, r25
 58c:	8b bb       	out	0x1b, r24	; 27
 58e:	08 95       	ret
 590:	47 b3       	in	r20, 0x17	; 23
 592:	21 e0       	ldi	r18, 0x01	; 1
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	b9 01       	movw	r22, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_InitPin+0x5c>
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	8a 95       	dec	r24
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_InitPin+0x58>
 5a2:	cb 01       	movw	r24, r22
 5a4:	94 2f       	mov	r25, r20
 5a6:	98 2b       	or	r25, r24
 5a8:	97 bb       	out	0x17, r25	; 23
 5aa:	98 b3       	in	r25, 0x18	; 24
 5ac:	80 95       	com	r24
 5ae:	89 23       	and	r24, r25
 5b0:	88 bb       	out	0x18, r24	; 24
 5b2:	08 95       	ret
 5b4:	44 b3       	in	r20, 0x14	; 20
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	b9 01       	movw	r22, r18
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_InitPin+0x80>
 5be:	66 0f       	add	r22, r22
 5c0:	77 1f       	adc	r23, r23
 5c2:	8a 95       	dec	r24
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_InitPin+0x7c>
 5c6:	cb 01       	movw	r24, r22
 5c8:	94 2f       	mov	r25, r20
 5ca:	98 2b       	or	r25, r24
 5cc:	94 bb       	out	0x14, r25	; 20
 5ce:	95 b3       	in	r25, 0x15	; 21
 5d0:	80 95       	com	r24
 5d2:	89 23       	and	r24, r25
 5d4:	85 bb       	out	0x15, r24	; 21
 5d6:	08 95       	ret
 5d8:	41 b3       	in	r20, 0x11	; 17
 5da:	21 e0       	ldi	r18, 0x01	; 1
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	b9 01       	movw	r22, r18
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_InitPin+0xa4>
 5e2:	66 0f       	add	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	8a 95       	dec	r24
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_InitPin+0xa0>
 5ea:	cb 01       	movw	r24, r22
 5ec:	94 2f       	mov	r25, r20
 5ee:	98 2b       	or	r25, r24
 5f0:	91 bb       	out	0x11, r25	; 17
 5f2:	92 b3       	in	r25, 0x12	; 18
 5f4:	80 95       	com	r24
 5f6:	89 23       	and	r24, r25
 5f8:	82 bb       	out	0x12, r24	; 18
 5fa:	08 95       	ret
 5fc:	91 30       	cpi	r25, 0x01	; 1
 5fe:	c1 f0       	breq	.+48     	; 0x630 <DIO_InitPin+0xee>
 600:	28 f0       	brcs	.+10     	; 0x60c <DIO_InitPin+0xca>
 602:	92 30       	cpi	r25, 0x02	; 2
 604:	39 f1       	breq	.+78     	; 0x654 <DIO_InitPin+0x112>
 606:	93 30       	cpi	r25, 0x03	; 3
 608:	b9 f1       	breq	.+110    	; 0x678 <DIO_InitPin+0x136>
 60a:	08 95       	ret
 60c:	4a b3       	in	r20, 0x1a	; 26
 60e:	21 e0       	ldi	r18, 0x01	; 1
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	b9 01       	movw	r22, r18
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_InitPin+0xd8>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	8a 95       	dec	r24
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_InitPin+0xd4>
 61e:	cb 01       	movw	r24, r22
 620:	80 95       	com	r24
 622:	94 2f       	mov	r25, r20
 624:	98 23       	and	r25, r24
 626:	9a bb       	out	0x1a, r25	; 26
 628:	9b b3       	in	r25, 0x1b	; 27
 62a:	89 23       	and	r24, r25
 62c:	8b bb       	out	0x1b, r24	; 27
 62e:	08 95       	ret
 630:	47 b3       	in	r20, 0x17	; 23
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_InitPin+0xfc>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_InitPin+0xf8>
 642:	cb 01       	movw	r24, r22
 644:	80 95       	com	r24
 646:	94 2f       	mov	r25, r20
 648:	98 23       	and	r25, r24
 64a:	97 bb       	out	0x17, r25	; 23
 64c:	98 b3       	in	r25, 0x18	; 24
 64e:	89 23       	and	r24, r25
 650:	88 bb       	out	0x18, r24	; 24
 652:	08 95       	ret
 654:	44 b3       	in	r20, 0x14	; 20
 656:	21 e0       	ldi	r18, 0x01	; 1
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	b9 01       	movw	r22, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_InitPin+0x120>
 65e:	66 0f       	add	r22, r22
 660:	77 1f       	adc	r23, r23
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_InitPin+0x11c>
 666:	cb 01       	movw	r24, r22
 668:	80 95       	com	r24
 66a:	94 2f       	mov	r25, r20
 66c:	98 23       	and	r25, r24
 66e:	94 bb       	out	0x14, r25	; 20
 670:	95 b3       	in	r25, 0x15	; 21
 672:	89 23       	and	r24, r25
 674:	85 bb       	out	0x15, r24	; 21
 676:	08 95       	ret
 678:	41 b3       	in	r20, 0x11	; 17
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	b9 01       	movw	r22, r18
 680:	02 c0       	rjmp	.+4      	; 0x686 <DIO_InitPin+0x144>
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	8a 95       	dec	r24
 688:	e2 f7       	brpl	.-8      	; 0x682 <DIO_InitPin+0x140>
 68a:	cb 01       	movw	r24, r22
 68c:	80 95       	com	r24
 68e:	94 2f       	mov	r25, r20
 690:	98 23       	and	r25, r24
 692:	91 bb       	out	0x11, r25	; 17
 694:	92 b3       	in	r25, 0x12	; 18
 696:	89 23       	and	r24, r25
 698:	82 bb       	out	0x12, r24	; 18
 69a:	08 95       	ret
 69c:	91 30       	cpi	r25, 0x01	; 1
 69e:	c1 f0       	breq	.+48     	; 0x6d0 <DIO_InitPin+0x18e>
 6a0:	28 f0       	brcs	.+10     	; 0x6ac <DIO_InitPin+0x16a>
 6a2:	92 30       	cpi	r25, 0x02	; 2
 6a4:	39 f1       	breq	.+78     	; 0x6f4 <DIO_InitPin+0x1b2>
 6a6:	93 30       	cpi	r25, 0x03	; 3
 6a8:	b9 f1       	breq	.+110    	; 0x718 <DIO_InitPin+0x1d6>
 6aa:	08 95       	ret
 6ac:	4a b3       	in	r20, 0x1a	; 26
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	b9 01       	movw	r22, r18
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_InitPin+0x178>
 6b6:	66 0f       	add	r22, r22
 6b8:	77 1f       	adc	r23, r23
 6ba:	8a 95       	dec	r24
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_InitPin+0x174>
 6be:	cb 01       	movw	r24, r22
 6c0:	96 2f       	mov	r25, r22
 6c2:	90 95       	com	r25
 6c4:	94 23       	and	r25, r20
 6c6:	9a bb       	out	0x1a, r25	; 26
 6c8:	9b b3       	in	r25, 0x1b	; 27
 6ca:	89 2b       	or	r24, r25
 6cc:	8b bb       	out	0x1b, r24	; 27
 6ce:	08 95       	ret
 6d0:	47 b3       	in	r20, 0x17	; 23
 6d2:	21 e0       	ldi	r18, 0x01	; 1
 6d4:	30 e0       	ldi	r19, 0x00	; 0
 6d6:	b9 01       	movw	r22, r18
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_InitPin+0x19c>
 6da:	66 0f       	add	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	8a 95       	dec	r24
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <DIO_InitPin+0x198>
 6e2:	cb 01       	movw	r24, r22
 6e4:	96 2f       	mov	r25, r22
 6e6:	90 95       	com	r25
 6e8:	94 23       	and	r25, r20
 6ea:	97 bb       	out	0x17, r25	; 23
 6ec:	98 b3       	in	r25, 0x18	; 24
 6ee:	89 2b       	or	r24, r25
 6f0:	88 bb       	out	0x18, r24	; 24
 6f2:	08 95       	ret
 6f4:	44 b3       	in	r20, 0x14	; 20
 6f6:	21 e0       	ldi	r18, 0x01	; 1
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	b9 01       	movw	r22, r18
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_InitPin+0x1c0>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	8a 95       	dec	r24
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_InitPin+0x1bc>
 706:	cb 01       	movw	r24, r22
 708:	96 2f       	mov	r25, r22
 70a:	90 95       	com	r25
 70c:	94 23       	and	r25, r20
 70e:	94 bb       	out	0x14, r25	; 20
 710:	95 b3       	in	r25, 0x15	; 21
 712:	89 2b       	or	r24, r25
 714:	85 bb       	out	0x15, r24	; 21
 716:	08 95       	ret
 718:	41 b3       	in	r20, 0x11	; 17
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	b9 01       	movw	r22, r18
 720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_InitPin+0x1e4>
 722:	66 0f       	add	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	8a 95       	dec	r24
 728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_InitPin+0x1e0>
 72a:	cb 01       	movw	r24, r22
 72c:	96 2f       	mov	r25, r22
 72e:	90 95       	com	r25
 730:	94 23       	and	r25, r20
 732:	91 bb       	out	0x11, r25	; 17
 734:	92 b3       	in	r25, 0x12	; 18
 736:	89 2b       	or	r24, r25
 738:	82 bb       	out	0x12, r24	; 18
 73a:	08 95       	ret

0000073c <DIO_WritePin>:
 73c:	98 2f       	mov	r25, r24
 73e:	96 95       	lsr	r25
 740:	96 95       	lsr	r25
 742:	96 95       	lsr	r25
 744:	87 70       	andi	r24, 0x07	; 7
 746:	61 30       	cpi	r22, 0x01	; 1
 748:	e1 f5       	brne	.+120    	; 0x7c2 <DIO_WritePin+0x86>
 74a:	91 30       	cpi	r25, 0x01	; 1
 74c:	99 f0       	breq	.+38     	; 0x774 <DIO_WritePin+0x38>
 74e:	28 f0       	brcs	.+10     	; 0x75a <DIO_WritePin+0x1e>
 750:	92 30       	cpi	r25, 0x02	; 2
 752:	e9 f0       	breq	.+58     	; 0x78e <DIO_WritePin+0x52>
 754:	93 30       	cpi	r25, 0x03	; 3
 756:	41 f1       	breq	.+80     	; 0x7a8 <DIO_WritePin+0x6c>
 758:	08 95       	ret
 75a:	4b b3       	in	r20, 0x1b	; 27
 75c:	21 e0       	ldi	r18, 0x01	; 1
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	b9 01       	movw	r22, r18
 762:	02 c0       	rjmp	.+4      	; 0x768 <DIO_WritePin+0x2c>
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	8a 95       	dec	r24
 76a:	e2 f7       	brpl	.-8      	; 0x764 <DIO_WritePin+0x28>
 76c:	cb 01       	movw	r24, r22
 76e:	84 2b       	or	r24, r20
 770:	8b bb       	out	0x1b, r24	; 27
 772:	08 95       	ret
 774:	48 b3       	in	r20, 0x18	; 24
 776:	21 e0       	ldi	r18, 0x01	; 1
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	b9 01       	movw	r22, r18
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_WritePin+0x46>
 77e:	66 0f       	add	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	8a 95       	dec	r24
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_WritePin+0x42>
 786:	cb 01       	movw	r24, r22
 788:	84 2b       	or	r24, r20
 78a:	88 bb       	out	0x18, r24	; 24
 78c:	08 95       	ret
 78e:	45 b3       	in	r20, 0x15	; 21
 790:	21 e0       	ldi	r18, 0x01	; 1
 792:	30 e0       	ldi	r19, 0x00	; 0
 794:	b9 01       	movw	r22, r18
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_WritePin+0x60>
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	8a 95       	dec	r24
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_WritePin+0x5c>
 7a0:	cb 01       	movw	r24, r22
 7a2:	84 2b       	or	r24, r20
 7a4:	85 bb       	out	0x15, r24	; 21
 7a6:	08 95       	ret
 7a8:	42 b3       	in	r20, 0x12	; 18
 7aa:	21 e0       	ldi	r18, 0x01	; 1
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	b9 01       	movw	r22, r18
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <DIO_WritePin+0x7a>
 7b2:	66 0f       	add	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	8a 95       	dec	r24
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <DIO_WritePin+0x76>
 7ba:	cb 01       	movw	r24, r22
 7bc:	84 2b       	or	r24, r20
 7be:	82 bb       	out	0x12, r24	; 18
 7c0:	08 95       	ret
 7c2:	61 11       	cpse	r22, r1
 7c4:	3f c0       	rjmp	.+126    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7c6:	91 30       	cpi	r25, 0x01	; 1
 7c8:	a1 f0       	breq	.+40     	; 0x7f2 <DIO_WritePin+0xb6>
 7ca:	28 f0       	brcs	.+10     	; 0x7d6 <DIO_WritePin+0x9a>
 7cc:	92 30       	cpi	r25, 0x02	; 2
 7ce:	f9 f0       	breq	.+62     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7d0:	93 30       	cpi	r25, 0x03	; 3
 7d2:	59 f1       	breq	.+86     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7d4:	08 95       	ret
 7d6:	4b b3       	in	r20, 0x1b	; 27
 7d8:	21 e0       	ldi	r18, 0x01	; 1
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	b9 01       	movw	r22, r18
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <DIO_WritePin+0xa8>
 7e0:	66 0f       	add	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	8a 95       	dec	r24
 7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <DIO_WritePin+0xa4>
 7e8:	cb 01       	movw	r24, r22
 7ea:	80 95       	com	r24
 7ec:	84 23       	and	r24, r20
 7ee:	8b bb       	out	0x1b, r24	; 27
 7f0:	08 95       	ret
 7f2:	48 b3       	in	r20, 0x18	; 24
 7f4:	21 e0       	ldi	r18, 0x01	; 1
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	b9 01       	movw	r22, r18
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
 7fc:	66 0f       	add	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	8a 95       	dec	r24
 802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_WritePin+0xc0>
 804:	cb 01       	movw	r24, r22
 806:	80 95       	com	r24
 808:	84 23       	and	r24, r20
 80a:	88 bb       	out	0x18, r24	; 24
 80c:	08 95       	ret
 80e:	45 b3       	in	r20, 0x15	; 21
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	b9 01       	movw	r22, r18
 816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 818:	66 0f       	add	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	8a 95       	dec	r24
 81e:	e2 f7       	brpl	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	cb 01       	movw	r24, r22
 822:	80 95       	com	r24
 824:	84 23       	and	r24, r20
 826:	85 bb       	out	0x15, r24	; 21
 828:	08 95       	ret
 82a:	42 b3       	in	r20, 0x12	; 18
 82c:	21 e0       	ldi	r18, 0x01	; 1
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	b9 01       	movw	r22, r18
 832:	02 c0       	rjmp	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 834:	66 0f       	add	r22, r22
 836:	77 1f       	adc	r23, r23
 838:	8a 95       	dec	r24
 83a:	e2 f7       	brpl	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 83c:	cb 01       	movw	r24, r22
 83e:	80 95       	com	r24
 840:	84 23       	and	r24, r20
 842:	82 bb       	out	0x12, r24	; 18
 844:	08 95       	ret

00000846 <DIO_Init>:
// }



void DIO_Init(void)
{
 846:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 848:	c0 e0       	ldi	r28, 0x00	; 0
 84a:	09 c0       	rjmp	.+18     	; 0x85e <DIO_Init+0x18>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
 84c:	ec 2f       	mov	r30, r28
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	e0 5a       	subi	r30, 0xA0	; 160
 852:	ff 4f       	sbci	r31, 0xFF	; 255
 854:	60 81       	ld	r22, Z
 856:	8c 2f       	mov	r24, r28
 858:	0e 94 a1 02 	call	0x542	; 0x542 <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
 85c:	cf 5f       	subi	r28, 0xFF	; 255
 85e:	c0 32       	cpi	r28, 0x20	; 32
 860:	a8 f3       	brcs	.-22     	; 0x84c <DIO_Init+0x6>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <UART_Init>:
}
void UART_InterruptEnable(void){
	SET_BIT( UCSRB , RXCIE) ;
}
void UART_InterruptDisEnable(void){
	CLR_BIT( UCSRB , RXCIE) ;
 866:	82 e3       	ldi	r24, 0x32	; 50
 868:	89 b9       	out	0x09, r24	; 9
 86a:	8a b1       	in	r24, 0x0a	; 10
 86c:	80 61       	ori	r24, 0x10	; 16
 86e:	8a b9       	out	0x0a, r24	; 10
 870:	8a b1       	in	r24, 0x0a	; 10
 872:	88 60       	ori	r24, 0x08	; 8
 874:	8a b9       	out	0x0a, r24	; 10
 876:	08 95       	ret

00000878 <__vector_13>:
}
void __vector_13 (void) __attribute__ ((signal));
void __vector_13 (void)
{
 878:	1f 92       	push	r1
 87a:	0f 92       	push	r0
 87c:	0f b6       	in	r0, 0x3f	; 63
 87e:	0f 92       	push	r0
 880:	11 24       	eor	r1, r1
 882:	8f 93       	push	r24
	dataISR= UDR ;
 884:	8c b1       	in	r24, 0x0c	; 12
 886:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
	//LCD_WriteString("00");
 88a:	8f 91       	pop	r24
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti

00000896 <IsEmpty_Filter>:
		Pointer_tail= Pointer_tail%SIZE_MAX_ADC_Queue ;
	}
	return FINE_QUE ;
}
Que_S_t IsEmpty_Filter(void){
	if(Pointer_tail == Pointer_Head&&QUE_Flag==0) return EMPTY_QUE ;
 896:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <Pointer_tail>
 89a:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Pointer_Head>
 89e:	98 13       	cpse	r25, r24
 8a0:	06 c0       	rjmp	.+12     	; 0x8ae <IsEmpty_Filter+0x18>
 8a2:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <QUE_Flag>
 8a6:	88 23       	and	r24, r24
 8a8:	21 f0       	breq	.+8      	; 0x8b2 <IsEmpty_Filter+0x1c>
	return FINE_QUE ;
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	08 95       	ret
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	08 95       	ret
		Pointer_tail= Pointer_tail%SIZE_MAX_ADC_Queue ;
	}
	return FINE_QUE ;
}
Que_S_t IsEmpty_Filter(void){
	if(Pointer_tail == Pointer_Head&&QUE_Flag==0) return EMPTY_QUE ;
 8b2:	80 e0       	ldi	r24, 0x00	; 0
	return FINE_QUE ;
}
 8b4:	08 95       	ret

000008b6 <DeQueue_ADC_Filter>:
		Pointer_Head++ ;
		Pointer_Head= Pointer_Head%SIZE_MAX_ADC_Queue ;
	}
	return FINE_QUE ;
}
Que_S_t DeQueue_ADC_Filter(u16* data ){
 8b6:	0f 93       	push	r16
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	8c 01       	movw	r16, r24
	
	if (Pointer_tail ==SIZE_MAX_ADC_Queue-1 )QUE_Flag =0 ;
 8be:	c0 91 94 00 	lds	r28, 0x0094	; 0x800094 <Pointer_tail>
 8c2:	c4 30       	cpi	r28, 0x04	; 4
 8c4:	11 f4       	brne	.+4      	; 0x8ca <DeQueue_ADC_Filter+0x14>
 8c6:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <QUE_Flag>
	if (IsEmpty_Filter()== EMPTY_QUE){
 8ca:	0e 94 4b 04 	call	0x896	; 0x896 <IsEmpty_Filter>
 8ce:	88 23       	and	r24, r24
 8d0:	d1 f0       	breq	.+52     	; 0x906 <DeQueue_ADC_Filter+0x50>
		// 		LCD_WriteNumber(Pointer_Head);
		// 		LCD_SetCursor(1,12);
		// 		LCD_WriteNumber(Pointer_tail);
		// 		LCD_SetCursor(1,14);
		// 		LCD_WriteNumber(QueueAdc[Pointer_tail]);
		*data  = QueueAdc[Pointer_tail] ;
 8d2:	ec 2f       	mov	r30, r28
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	ee 0f       	add	r30, r30
 8d8:	ff 1f       	adc	r31, r31
 8da:	ea 56       	subi	r30, 0x6A	; 106
 8dc:	ff 4f       	sbci	r31, 0xFF	; 255
 8de:	80 81       	ld	r24, Z
 8e0:	91 81       	ldd	r25, Z+1	; 0x01
 8e2:	f8 01       	movw	r30, r16
 8e4:	91 83       	std	Z+1, r25	; 0x01
 8e6:	80 83       	st	Z, r24
		Pointer_tail++ ;
 8e8:	cf 5f       	subi	r28, 0xFF	; 255
		Pointer_tail= Pointer_tail%SIZE_MAX_ADC_Queue ;
 8ea:	8d ec       	ldi	r24, 0xCD	; 205
 8ec:	c8 9f       	mul	r28, r24
 8ee:	81 2d       	mov	r24, r1
 8f0:	11 24       	eor	r1, r1
 8f2:	86 95       	lsr	r24
 8f4:	86 95       	lsr	r24
 8f6:	98 2f       	mov	r25, r24
 8f8:	99 0f       	add	r25, r25
 8fa:	99 0f       	add	r25, r25
 8fc:	89 0f       	add	r24, r25
 8fe:	c8 1b       	sub	r28, r24
 900:	c0 93 94 00 	sts	0x0094, r28	; 0x800094 <Pointer_tail>
	}
	return FINE_QUE ;
 904:	81 e0       	ldi	r24, 0x01	; 1
}
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	08 95       	ret

0000090e <IsFull_Filter>:
Que_S_t IsEmpty_Filter(void){
	if(Pointer_tail == Pointer_Head&&QUE_Flag==0) return EMPTY_QUE ;
	return FINE_QUE ;
}
Que_S_t IsFull_Filter(void){
	if((Pointer_tail == Pointer_Head ) && QUE_Flag==1 ) return FULL_QUE ;
 90e:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <Pointer_tail>
 912:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Pointer_Head>
 916:	98 13       	cpse	r25, r24
 918:	06 c0       	rjmp	.+12     	; 0x926 <IsFull_Filter+0x18>
 91a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <QUE_Flag>
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	21 f0       	breq	.+8      	; 0x92a <IsFull_Filter+0x1c>
	return FINE_QUE ;
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	08 95       	ret
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	08 95       	ret
Que_S_t IsEmpty_Filter(void){
	if(Pointer_tail == Pointer_Head&&QUE_Flag==0) return EMPTY_QUE ;
	return FINE_QUE ;
}
Que_S_t IsFull_Filter(void){
	if((Pointer_tail == Pointer_Head ) && QUE_Flag==1 ) return FULL_QUE ;
 92a:	82 e0       	ldi	r24, 0x02	; 2
	return FINE_QUE ;
}
 92c:	08 95       	ret

0000092e <inQueue_ADC_Filter>:
static u8 Pointer_Head  = 0 ;
static u8 Pointer_tail  = 0 ;
static u8 QUE_Flag  = 0 ;


Que_S_t inQueue_ADC_Filter(u16 data){
 92e:	0f 93       	push	r16
 930:	1f 93       	push	r17
 932:	cf 93       	push	r28
 934:	8c 01       	movw	r16, r24
	if (Pointer_Head ==SIZE_MAX_ADC_Queue-1 )QUE_Flag = 1 ;
 936:	c0 91 95 00 	lds	r28, 0x0095	; 0x800095 <Pointer_Head>
 93a:	c4 30       	cpi	r28, 0x04	; 4
 93c:	19 f4       	brne	.+6      	; 0x944 <inQueue_ADC_Filter+0x16>
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <QUE_Flag>
	if (IsFull_Filter()== FULL_QUE){
 944:	0e 94 87 04 	call	0x90e	; 0x90e <IsFull_Filter>
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	b9 f0       	breq	.+46     	; 0x97a <inQueue_ADC_Filter+0x4c>
		return FULL_QUE ;
		}else {
		QueueAdc[Pointer_Head] = data ;
 94c:	ec 2f       	mov	r30, r28
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	ee 0f       	add	r30, r30
 952:	ff 1f       	adc	r31, r31
 954:	ea 56       	subi	r30, 0x6A	; 106
 956:	ff 4f       	sbci	r31, 0xFF	; 255
 958:	11 83       	std	Z+1, r17	; 0x01
 95a:	00 83       	st	Z, r16
		// 		LCD_WriteNumber(Pointer_Head);
		// 		LCD_SetCursor(1,12);
		// 		LCD_WriteNumber(Pointer_tail);
		// 		LCD_SetCursor(1,14);
		// 		LCD_WriteNumber(QUE_Flag);
		Pointer_Head++ ;
 95c:	cf 5f       	subi	r28, 0xFF	; 255
		Pointer_Head= Pointer_Head%SIZE_MAX_ADC_Queue ;
 95e:	8d ec       	ldi	r24, 0xCD	; 205
 960:	c8 9f       	mul	r28, r24
 962:	81 2d       	mov	r24, r1
 964:	11 24       	eor	r1, r1
 966:	86 95       	lsr	r24
 968:	86 95       	lsr	r24
 96a:	98 2f       	mov	r25, r24
 96c:	99 0f       	add	r25, r25
 96e:	99 0f       	add	r25, r25
 970:	89 0f       	add	r24, r25
 972:	c8 1b       	sub	r28, r24
 974:	c0 93 95 00 	sts	0x0095, r28	; 0x800095 <Pointer_Head>
	}
	return FINE_QUE ;
 978:	81 e0       	ldi	r24, 0x01	; 1
}
 97a:	cf 91       	pop	r28
 97c:	1f 91       	pop	r17
 97e:	0f 91       	pop	r16
 980:	08 95       	ret

00000982 <ADC_filter_init>:
Que_S_t IsFull_Filter(void){
	if((Pointer_tail == Pointer_Head ) && QUE_Flag==1 ) return FULL_QUE ;
	return FINE_QUE ;
}

void ADC_filter_init (){
 982:	cf 93       	push	r28
	u16 data = 0 ;
	for (u8 i = 0 ; i < SIZE_MAX_ADC_Queue ; i++)
 984:	c0 e0       	ldi	r28, 0x00	; 0
 986:	1a c0       	rjmp	.+52     	; 0x9bc <ADC_filter_init+0x3a>
	{
		data =ADC_Read(FILTER_CH) ;
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ADC_Read>
		filterData = filterData +data ;
 98e:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <filterData>
 992:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <filterData+0x1>
 996:	60 91 a2 00 	lds	r22, 0x00A2	; 0x8000a2 <filterData+0x2>
 99a:	70 91 a3 00 	lds	r23, 0x00A3	; 0x8000a3 <filterData+0x3>
 99e:	48 0f       	add	r20, r24
 9a0:	59 1f       	adc	r21, r25
 9a2:	61 1d       	adc	r22, r1
 9a4:	71 1d       	adc	r23, r1
 9a6:	40 93 a0 00 	sts	0x00A0, r20	; 0x8000a0 <filterData>
 9aa:	50 93 a1 00 	sts	0x00A1, r21	; 0x8000a1 <filterData+0x1>
 9ae:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <filterData+0x2>
 9b2:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <filterData+0x3>
		inQueue_ADC_Filter(data);
 9b6:	0e 94 97 04 	call	0x92e	; 0x92e <inQueue_ADC_Filter>
	return FINE_QUE ;
}

void ADC_filter_init (){
	u16 data = 0 ;
	for (u8 i = 0 ; i < SIZE_MAX_ADC_Queue ; i++)
 9ba:	cf 5f       	subi	r28, 0xFF	; 255
 9bc:	c5 30       	cpi	r28, 0x05	; 5
 9be:	20 f3       	brcs	.-56     	; 0x988 <ADC_filter_init+0x6>
		data =ADC_Read(FILTER_CH) ;
		filterData = filterData +data ;
		inQueue_ADC_Filter(data);
	}
	//filterData = filterData/SIZE_MAX_ADC_Queue ;
}
 9c0:	cf 91       	pop	r28
 9c2:	08 95       	ret

000009c4 <ADC_Call_Filter>:
void ADC_Call_Filter (){
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	00 d0       	rcall	.+0      	; 0x9ce <ADC_Call_Filter+0xa>
 9ce:	cd b7       	in	r28, 0x3d	; 61
 9d0:	de b7       	in	r29, 0x3e	; 62
	u16 data = 0 ;
	u16 data2 = 0 ;
 9d2:	1a 82       	std	Y+2, r1	; 0x02
 9d4:	19 82       	std	Y+1, r1	; 0x01
	data =ADC_Read(FILTER_CH) ;
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <ADC_Read>
 9dc:	8c 01       	movw	r16, r24
	DeQueue_ADC_Filter(&data2) ;
 9de:	ce 01       	movw	r24, r28
 9e0:	01 96       	adiw	r24, 0x01	; 1
 9e2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <DeQueue_ADC_Filter>
	filterData = filterData -data2 ; 
 9e6:	29 81       	ldd	r18, Y+1	; 0x01
 9e8:	3a 81       	ldd	r19, Y+2	; 0x02
 9ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <filterData>
 9ee:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <filterData+0x1>
 9f2:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <filterData+0x2>
 9f6:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <filterData+0x3>
 9fa:	82 1b       	sub	r24, r18
 9fc:	93 0b       	sbc	r25, r19
 9fe:	a1 09       	sbc	r26, r1
 a00:	b1 09       	sbc	r27, r1
	filterData =filterData+data ;
 a02:	80 0f       	add	r24, r16
 a04:	91 1f       	adc	r25, r17
 a06:	a1 1d       	adc	r26, r1
 a08:	b1 1d       	adc	r27, r1
 a0a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <filterData>
 a0e:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <filterData+0x1>
 a12:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <filterData+0x2>
 a16:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <filterData+0x3>
	inQueue_ADC_Filter(data);
 a1a:	c8 01       	movw	r24, r16
 a1c:	0e 94 97 04 	call	0x92e	; 0x92e <inQueue_ADC_Filter>
}
 a20:	0f 90       	pop	r0
 a22:	0f 90       	pop	r0
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	1f 91       	pop	r17
 a2a:	0f 91       	pop	r16
 a2c:	08 95       	ret

00000a2e <ADC_Getter_Filter>:
u16 ADC_Getter_Filter(){
 a2e:	8f 92       	push	r8
 a30:	9f 92       	push	r9
 a32:	af 92       	push	r10
 a34:	bf 92       	push	r11
 a36:	cf 92       	push	r12
 a38:	df 92       	push	r13
 a3a:	ef 92       	push	r14
 a3c:	ff 92       	push	r15
 a3e:	0f 93       	push	r16
	return filterData/SIZE_MAX_ADC_Queue ;
 a40:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <filterData>
 a44:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <filterData+0x1>
 a48:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <filterData+0x2>
 a4c:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <filterData+0x3>
 a50:	2d ec       	ldi	r18, 0xCD	; 205
 a52:	3c ec       	ldi	r19, 0xCC	; 204
 a54:	4c ec       	ldi	r20, 0xCC	; 204
 a56:	5c ec       	ldi	r21, 0xCC	; 204
 a58:	0e 94 92 05 	call	0xb24	; 0xb24 <__umulsidi3>
 a5c:	00 e2       	ldi	r16, 0x20	; 32
 a5e:	0e 94 96 06 	call	0xd2c	; 0xd2c <__lshrdi3>
 a62:	82 2e       	mov	r8, r18
 a64:	93 2e       	mov	r9, r19
 a66:	a4 2e       	mov	r10, r20
 a68:	b5 2e       	mov	r11, r21
 a6a:	d5 01       	movw	r26, r10
 a6c:	c4 01       	movw	r24, r8
 a6e:	b6 95       	lsr	r27
 a70:	a7 95       	ror	r26
 a72:	97 95       	ror	r25
 a74:	87 95       	ror	r24
 a76:	b6 95       	lsr	r27
 a78:	a7 95       	ror	r26
 a7a:	97 95       	ror	r25
 a7c:	87 95       	ror	r24
}
 a7e:	0f 91       	pop	r16
 a80:	ff 90       	pop	r15
 a82:	ef 90       	pop	r14
 a84:	df 90       	pop	r13
 a86:	cf 90       	pop	r12
 a88:	bf 90       	pop	r11
 a8a:	af 90       	pop	r10
 a8c:	9f 90       	pop	r9
 a8e:	8f 90       	pop	r8
 a90:	08 95       	ret

00000a92 <IsFull>:
Que_S_t IsEmpty(void){
		if(Pointer_tail == Pointer_Head&&QUE_Flag==0) return EMPTY_QUE ;
		return FINE_QUE ;
}
Que_S_t IsFull(void){
	if((Pointer_tail == Pointer_Head ) && QUE_Flag==1 ) return FULL_QUE ; 
 a92:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <Pointer_tail>
 a96:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <Pointer_Head>
 a9a:	98 13       	cpse	r25, r24
 a9c:	06 c0       	rjmp	.+12     	; 0xaaa <IsFull+0x18>
 a9e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <QUE_Flag>
 aa2:	81 30       	cpi	r24, 0x01	; 1
 aa4:	21 f0       	breq	.+8      	; 0xaae <IsFull+0x1c>
	  return FINE_QUE ; 
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	08 95       	ret
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	08 95       	ret
Que_S_t IsEmpty(void){
		if(Pointer_tail == Pointer_Head&&QUE_Flag==0) return EMPTY_QUE ;
		return FINE_QUE ;
}
Que_S_t IsFull(void){
	if((Pointer_tail == Pointer_Head ) && QUE_Flag==1 ) return FULL_QUE ; 
 aae:	82 e0       	ldi	r24, 0x02	; 2
	  return FINE_QUE ; 
 ab0:	08 95       	ret

00000ab2 <inQueue_ADC>:
static u8 Pointer_Head  = 0 ;
static u8 Pointer_tail  = 0 ;
static u8 QUE_Flag  = 0 ;


Que_S_t inQueue_ADC(u16 data){
 ab2:	0f 93       	push	r16
 ab4:	1f 93       	push	r17
 ab6:	cf 93       	push	r28
 ab8:	8c 01       	movw	r16, r24
	if (Pointer_Head ==SIZE_MAX_ADC_Queue-1 )QUE_Flag = 1 ; 
 aba:	c0 91 a6 00 	lds	r28, 0x00A6	; 0x8000a6 <Pointer_Head>
 abe:	c4 30       	cpi	r28, 0x04	; 4
 ac0:	19 f4       	brne	.+6      	; 0xac8 <inQueue_ADC+0x16>
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <QUE_Flag>
	if (IsFull()== FULL_QUE){
 ac8:	0e 94 49 05 	call	0xa92	; 0xa92 <IsFull>
 acc:	82 30       	cpi	r24, 0x02	; 2
 ace:	b9 f0       	breq	.+46     	; 0xafe <inQueue_ADC+0x4c>
		return FULL_QUE ;
		}else {
		QueueAdc[Pointer_Head] = data ;
 ad0:	ec 2f       	mov	r30, r28
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	ee 0f       	add	r30, r30
 ad6:	ff 1f       	adc	r31, r31
 ad8:	e9 55       	subi	r30, 0x59	; 89
 ada:	ff 4f       	sbci	r31, 0xFF	; 255
 adc:	11 83       	std	Z+1, r17	; 0x01
 ade:	00 83       	st	Z, r16
// 		LCD_WriteNumber(Pointer_Head);
// 		LCD_SetCursor(1,12);
// 		LCD_WriteNumber(Pointer_tail);
// 		LCD_SetCursor(1,14);
// 		LCD_WriteNumber(QUE_Flag);
		Pointer_Head++ ;
 ae0:	cf 5f       	subi	r28, 0xFF	; 255
		Pointer_Head= Pointer_Head%SIZE_MAX_ADC_Queue ;
 ae2:	8d ec       	ldi	r24, 0xCD	; 205
 ae4:	c8 9f       	mul	r28, r24
 ae6:	81 2d       	mov	r24, r1
 ae8:	11 24       	eor	r1, r1
 aea:	86 95       	lsr	r24
 aec:	86 95       	lsr	r24
 aee:	98 2f       	mov	r25, r24
 af0:	99 0f       	add	r25, r25
 af2:	99 0f       	add	r25, r25
 af4:	89 0f       	add	r24, r25
 af6:	c8 1b       	sub	r28, r24
 af8:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <Pointer_Head>
	}
		return FINE_QUE ; 
 afc:	81 e0       	ldi	r24, 0x01	; 1
}
 afe:	cf 91       	pop	r28
 b00:	1f 91       	pop	r17
 b02:	0f 91       	pop	r16
 b04:	08 95       	ret

00000b06 <__umulhisi3>:
 b06:	a2 9f       	mul	r26, r18
 b08:	b0 01       	movw	r22, r0
 b0a:	b3 9f       	mul	r27, r19
 b0c:	c0 01       	movw	r24, r0
 b0e:	a3 9f       	mul	r26, r19
 b10:	70 0d       	add	r23, r0
 b12:	81 1d       	adc	r24, r1
 b14:	11 24       	eor	r1, r1
 b16:	91 1d       	adc	r25, r1
 b18:	b2 9f       	mul	r27, r18
 b1a:	70 0d       	add	r23, r0
 b1c:	81 1d       	adc	r24, r1
 b1e:	11 24       	eor	r1, r1
 b20:	91 1d       	adc	r25, r1
 b22:	08 95       	ret

00000b24 <__umulsidi3>:
 b24:	e8 94       	clt

00000b26 <__umulsidi3_helper>:
 b26:	df 93       	push	r29
 b28:	cf 93       	push	r28
 b2a:	fc 01       	movw	r30, r24
 b2c:	db 01       	movw	r26, r22
 b2e:	0e 94 83 05 	call	0xb06	; 0xb06 <__umulhisi3>
 b32:	7f 93       	push	r23
 b34:	6f 93       	push	r22
 b36:	e9 01       	movw	r28, r18
 b38:	9a 01       	movw	r18, r20
 b3a:	ac 01       	movw	r20, r24
 b3c:	bf 93       	push	r27
 b3e:	af 93       	push	r26
 b40:	3f 93       	push	r19
 b42:	2f 93       	push	r18
 b44:	df 01       	movw	r26, r30
 b46:	0e 94 83 05 	call	0xb06	; 0xb06 <__umulhisi3>
 b4a:	26 f4       	brtc	.+8      	; 0xb54 <__umulsidi3_helper+0x2e>
 b4c:	6c 1b       	sub	r22, r28
 b4e:	7d 0b       	sbc	r23, r29
 b50:	82 0b       	sbc	r24, r18
 b52:	93 0b       	sbc	r25, r19
 b54:	9e 01       	movw	r18, r28
 b56:	eb 01       	movw	r28, r22
 b58:	fc 01       	movw	r30, r24
 b5a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__muldi3_6>
 b5e:	af 91       	pop	r26
 b60:	bf 91       	pop	r27
 b62:	2f 91       	pop	r18
 b64:	3f 91       	pop	r19
 b66:	0e 94 be 06 	call	0xd7c	; 0xd7c <__muldi3_6>
 b6a:	be 01       	movw	r22, r28
 b6c:	cf 01       	movw	r24, r30
 b6e:	f9 01       	movw	r30, r18
 b70:	2f 91       	pop	r18
 b72:	3f 91       	pop	r19
 b74:	cf 91       	pop	r28
 b76:	df 91       	pop	r29
 b78:	08 95       	ret

00000b7a <__moddi3>:
 b7a:	68 94       	set
 b7c:	01 c0       	rjmp	.+2      	; 0xb80 <__divdi3_moddi3>

00000b7e <__divdi3>:
 b7e:	e8 94       	clt

00000b80 <__divdi3_moddi3>:
 b80:	f9 2f       	mov	r31, r25
 b82:	f1 2b       	or	r31, r17
 b84:	12 f0       	brmi	.+4      	; 0xb8a <__divdi3_moddi3+0xa>
 b86:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__udivdi3_umoddi3>
 b8a:	a0 e0       	ldi	r26, 0x00	; 0
 b8c:	b0 e0       	ldi	r27, 0x00	; 0
 b8e:	eb ec       	ldi	r30, 0xCB	; 203
 b90:	f5 e0       	ldi	r31, 0x05	; 5
 b92:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__prologue_saves__+0xc>
 b96:	09 2e       	mov	r0, r25
 b98:	05 94       	asr	r0
 b9a:	22 f4       	brpl	.+8      	; 0xba4 <__divdi3_moddi3+0x24>
 b9c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__negdi2>
 ba0:	11 23       	and	r17, r17
 ba2:	92 f4       	brpl	.+36     	; 0xbc8 <__divdi3_moddi3+0x48>
 ba4:	f0 e8       	ldi	r31, 0x80	; 128
 ba6:	0f 26       	eor	r0, r31
 ba8:	ff ef       	ldi	r31, 0xFF	; 255
 baa:	e0 94       	com	r14
 bac:	f0 94       	com	r15
 bae:	00 95       	com	r16
 bb0:	10 95       	com	r17
 bb2:	b0 94       	com	r11
 bb4:	c0 94       	com	r12
 bb6:	d0 94       	com	r13
 bb8:	a1 94       	neg	r10
 bba:	bf 0a       	sbc	r11, r31
 bbc:	cf 0a       	sbc	r12, r31
 bbe:	df 0a       	sbc	r13, r31
 bc0:	ef 0a       	sbc	r14, r31
 bc2:	ff 0a       	sbc	r15, r31
 bc4:	0f 0b       	sbc	r16, r31
 bc6:	1f 0b       	sbc	r17, r31
 bc8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__udivmod64>
 bcc:	07 fc       	sbrc	r0, 7
 bce:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__negdi2>
 bd2:	cd b7       	in	r28, 0x3d	; 61
 bd4:	de b7       	in	r29, 0x3e	; 62
 bd6:	ec e0       	ldi	r30, 0x0C	; 12
 bd8:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__epilogue_restores__+0xc>

00000bdc <__umoddi3>:
 bdc:	68 94       	set
 bde:	01 c0       	rjmp	.+2      	; 0xbe2 <__udivdi3_umoddi3>

00000be0 <__udivdi3>:
 be0:	e8 94       	clt

00000be2 <__udivdi3_umoddi3>:
 be2:	8f 92       	push	r8
 be4:	9f 92       	push	r9
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
 bea:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__udivmod64>
 bee:	df 91       	pop	r29
 bf0:	cf 91       	pop	r28
 bf2:	9f 90       	pop	r9
 bf4:	8f 90       	pop	r8
 bf6:	08 95       	ret

00000bf8 <__udivmod64>:
 bf8:	88 24       	eor	r8, r8
 bfa:	99 24       	eor	r9, r9
 bfc:	f4 01       	movw	r30, r8
 bfe:	e4 01       	movw	r28, r8
 c00:	b0 e4       	ldi	r27, 0x40	; 64
 c02:	9f 93       	push	r25
 c04:	aa 27       	eor	r26, r26
 c06:	9a 15       	cp	r25, r10
 c08:	8b 04       	cpc	r8, r11
 c0a:	9c 04       	cpc	r9, r12
 c0c:	ed 05       	cpc	r30, r13
 c0e:	fe 05       	cpc	r31, r14
 c10:	cf 05       	cpc	r28, r15
 c12:	d0 07       	cpc	r29, r16
 c14:	a1 07       	cpc	r26, r17
 c16:	98 f4       	brcc	.+38     	; 0xc3e <__udivmod64+0x46>
 c18:	ad 2f       	mov	r26, r29
 c1a:	dc 2f       	mov	r29, r28
 c1c:	cf 2f       	mov	r28, r31
 c1e:	fe 2f       	mov	r31, r30
 c20:	e9 2d       	mov	r30, r9
 c22:	98 2c       	mov	r9, r8
 c24:	89 2e       	mov	r8, r25
 c26:	98 2f       	mov	r25, r24
 c28:	87 2f       	mov	r24, r23
 c2a:	76 2f       	mov	r23, r22
 c2c:	65 2f       	mov	r22, r21
 c2e:	54 2f       	mov	r21, r20
 c30:	43 2f       	mov	r20, r19
 c32:	32 2f       	mov	r19, r18
 c34:	22 27       	eor	r18, r18
 c36:	b8 50       	subi	r27, 0x08	; 8
 c38:	31 f7       	brne	.-52     	; 0xc06 <__udivmod64+0xe>
 c3a:	bf 91       	pop	r27
 c3c:	27 c0       	rjmp	.+78     	; 0xc8c <__udivmod64+0x94>
 c3e:	1b 2e       	mov	r1, r27
 c40:	bf 91       	pop	r27
 c42:	bb 27       	eor	r27, r27
 c44:	22 0f       	add	r18, r18
 c46:	33 1f       	adc	r19, r19
 c48:	44 1f       	adc	r20, r20
 c4a:	55 1f       	adc	r21, r21
 c4c:	66 1f       	adc	r22, r22
 c4e:	77 1f       	adc	r23, r23
 c50:	88 1f       	adc	r24, r24
 c52:	99 1f       	adc	r25, r25
 c54:	88 1c       	adc	r8, r8
 c56:	99 1c       	adc	r9, r9
 c58:	ee 1f       	adc	r30, r30
 c5a:	ff 1f       	adc	r31, r31
 c5c:	cc 1f       	adc	r28, r28
 c5e:	dd 1f       	adc	r29, r29
 c60:	aa 1f       	adc	r26, r26
 c62:	bb 1f       	adc	r27, r27
 c64:	8a 14       	cp	r8, r10
 c66:	9b 04       	cpc	r9, r11
 c68:	ec 05       	cpc	r30, r12
 c6a:	fd 05       	cpc	r31, r13
 c6c:	ce 05       	cpc	r28, r14
 c6e:	df 05       	cpc	r29, r15
 c70:	a0 07       	cpc	r26, r16
 c72:	b1 07       	cpc	r27, r17
 c74:	48 f0       	brcs	.+18     	; 0xc88 <__udivmod64+0x90>
 c76:	8a 18       	sub	r8, r10
 c78:	9b 08       	sbc	r9, r11
 c7a:	ec 09       	sbc	r30, r12
 c7c:	fd 09       	sbc	r31, r13
 c7e:	ce 09       	sbc	r28, r14
 c80:	df 09       	sbc	r29, r15
 c82:	a0 0b       	sbc	r26, r16
 c84:	b1 0b       	sbc	r27, r17
 c86:	21 60       	ori	r18, 0x01	; 1
 c88:	1a 94       	dec	r1
 c8a:	e1 f6       	brne	.-72     	; 0xc44 <__udivmod64+0x4c>
 c8c:	2e f4       	brtc	.+10     	; 0xc98 <__udivmod64+0xa0>
 c8e:	94 01       	movw	r18, r8
 c90:	af 01       	movw	r20, r30
 c92:	be 01       	movw	r22, r28
 c94:	cd 01       	movw	r24, r26
 c96:	00 0c       	add	r0, r0
 c98:	08 95       	ret

00000c9a <__negdi2>:
 c9a:	60 95       	com	r22
 c9c:	70 95       	com	r23
 c9e:	80 95       	com	r24
 ca0:	90 95       	com	r25
 ca2:	30 95       	com	r19
 ca4:	40 95       	com	r20
 ca6:	50 95       	com	r21
 ca8:	21 95       	neg	r18
 caa:	3f 4f       	sbci	r19, 0xFF	; 255
 cac:	4f 4f       	sbci	r20, 0xFF	; 255
 cae:	5f 4f       	sbci	r21, 0xFF	; 255
 cb0:	6f 4f       	sbci	r22, 0xFF	; 255
 cb2:	7f 4f       	sbci	r23, 0xFF	; 255
 cb4:	8f 4f       	sbci	r24, 0xFF	; 255
 cb6:	9f 4f       	sbci	r25, 0xFF	; 255
 cb8:	08 95       	ret

00000cba <__prologue_saves__>:
 cba:	2f 92       	push	r2
 cbc:	3f 92       	push	r3
 cbe:	4f 92       	push	r4
 cc0:	5f 92       	push	r5
 cc2:	6f 92       	push	r6
 cc4:	7f 92       	push	r7
 cc6:	8f 92       	push	r8
 cc8:	9f 92       	push	r9
 cca:	af 92       	push	r10
 ccc:	bf 92       	push	r11
 cce:	cf 92       	push	r12
 cd0:	df 92       	push	r13
 cd2:	ef 92       	push	r14
 cd4:	ff 92       	push	r15
 cd6:	0f 93       	push	r16
 cd8:	1f 93       	push	r17
 cda:	cf 93       	push	r28
 cdc:	df 93       	push	r29
 cde:	cd b7       	in	r28, 0x3d	; 61
 ce0:	de b7       	in	r29, 0x3e	; 62
 ce2:	ca 1b       	sub	r28, r26
 ce4:	db 0b       	sbc	r29, r27
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	f8 94       	cli
 cea:	de bf       	out	0x3e, r29	; 62
 cec:	0f be       	out	0x3f, r0	; 63
 cee:	cd bf       	out	0x3d, r28	; 61
 cf0:	09 94       	ijmp

00000cf2 <__epilogue_restores__>:
 cf2:	2a 88       	ldd	r2, Y+18	; 0x12
 cf4:	39 88       	ldd	r3, Y+17	; 0x11
 cf6:	48 88       	ldd	r4, Y+16	; 0x10
 cf8:	5f 84       	ldd	r5, Y+15	; 0x0f
 cfa:	6e 84       	ldd	r6, Y+14	; 0x0e
 cfc:	7d 84       	ldd	r7, Y+13	; 0x0d
 cfe:	8c 84       	ldd	r8, Y+12	; 0x0c
 d00:	9b 84       	ldd	r9, Y+11	; 0x0b
 d02:	aa 84       	ldd	r10, Y+10	; 0x0a
 d04:	b9 84       	ldd	r11, Y+9	; 0x09
 d06:	c8 84       	ldd	r12, Y+8	; 0x08
 d08:	df 80       	ldd	r13, Y+7	; 0x07
 d0a:	ee 80       	ldd	r14, Y+6	; 0x06
 d0c:	fd 80       	ldd	r15, Y+5	; 0x05
 d0e:	0c 81       	ldd	r16, Y+4	; 0x04
 d10:	1b 81       	ldd	r17, Y+3	; 0x03
 d12:	aa 81       	ldd	r26, Y+2	; 0x02
 d14:	b9 81       	ldd	r27, Y+1	; 0x01
 d16:	ce 0f       	add	r28, r30
 d18:	d1 1d       	adc	r29, r1
 d1a:	0f b6       	in	r0, 0x3f	; 63
 d1c:	f8 94       	cli
 d1e:	de bf       	out	0x3e, r29	; 62
 d20:	0f be       	out	0x3f, r0	; 63
 d22:	cd bf       	out	0x3d, r28	; 61
 d24:	ed 01       	movw	r28, r26
 d26:	08 95       	ret

00000d28 <__ashrdi3>:
 d28:	97 fb       	bst	r25, 7
 d2a:	10 f8       	bld	r1, 0

00000d2c <__lshrdi3>:
 d2c:	16 94       	lsr	r1
 d2e:	00 08       	sbc	r0, r0
 d30:	0f 93       	push	r16
 d32:	08 30       	cpi	r16, 0x08	; 8
 d34:	98 f0       	brcs	.+38     	; 0xd5c <__lshrdi3+0x30>
 d36:	08 50       	subi	r16, 0x08	; 8
 d38:	23 2f       	mov	r18, r19
 d3a:	34 2f       	mov	r19, r20
 d3c:	45 2f       	mov	r20, r21
 d3e:	56 2f       	mov	r21, r22
 d40:	67 2f       	mov	r22, r23
 d42:	78 2f       	mov	r23, r24
 d44:	89 2f       	mov	r24, r25
 d46:	90 2d       	mov	r25, r0
 d48:	f4 cf       	rjmp	.-24     	; 0xd32 <__lshrdi3+0x6>
 d4a:	05 94       	asr	r0
 d4c:	97 95       	ror	r25
 d4e:	87 95       	ror	r24
 d50:	77 95       	ror	r23
 d52:	67 95       	ror	r22
 d54:	57 95       	ror	r21
 d56:	47 95       	ror	r20
 d58:	37 95       	ror	r19
 d5a:	27 95       	ror	r18
 d5c:	0a 95       	dec	r16
 d5e:	aa f7       	brpl	.-22     	; 0xd4a <__lshrdi3+0x1e>
 d60:	0f 91       	pop	r16
 d62:	08 95       	ret

00000d64 <__cmpdi2_s8>:
 d64:	00 24       	eor	r0, r0
 d66:	a7 fd       	sbrc	r26, 7
 d68:	00 94       	com	r0
 d6a:	2a 17       	cp	r18, r26
 d6c:	30 05       	cpc	r19, r0
 d6e:	40 05       	cpc	r20, r0
 d70:	50 05       	cpc	r21, r0
 d72:	60 05       	cpc	r22, r0
 d74:	70 05       	cpc	r23, r0
 d76:	80 05       	cpc	r24, r0
 d78:	90 05       	cpc	r25, r0
 d7a:	08 95       	ret

00000d7c <__muldi3_6>:
 d7c:	0e 94 83 05 	call	0xb06	; 0xb06 <__umulhisi3>
 d80:	46 0f       	add	r20, r22
 d82:	57 1f       	adc	r21, r23
 d84:	c8 1f       	adc	r28, r24
 d86:	d9 1f       	adc	r29, r25
 d88:	08 f4       	brcc	.+2      	; 0xd8c <__muldi3_6+0x10>
 d8a:	31 96       	adiw	r30, 0x01	; 1
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
